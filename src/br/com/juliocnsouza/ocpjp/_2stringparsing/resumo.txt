Parsing,Tokenizing, and Formatting

OBJETIVOS:

- Buscar, analizar e Construir Strings (incluindo Scanner, StringTokeninzer, StringBuilder, String e Formatter)

- Buscar, analizar e substituir strings usando expressões regulares, usando expressões padronizadas para encontrar valores limitados a: . , * , + , ? , \d , \D , \s , \S , \w , \W , \b , \B , [] e ()

- Formatar strings usando os parametros para formatação  %b, %c, %d, %f e %s.

SEARCH

Expressões regulares são como uma linguagem dentro da linguagem, foram feitas para ajudar programadores com tarefas de busca. Todas linguagens de programação que provém capacidade de usar expressões regulares usa um ou mais engines de regex (expressões regulares). Expressões regulares podem  buscar atraves de um dado de texto usando intruções programadas dentro das expressões. Um expressão regular é como um pequeno programa ou script passado a engine junto com dado de texto que você deseja processar.

BUSCA SIMPLES

Vamos começar com um exemplo bastante simples fazend ouma busca em uma string  para todas as ocorrências de expressão informada.

(BuscaSimples.java)

Se inserirmos o padrão 'ul' e o texto para busca 'julio' será encontrado na posição 1.

BUSCA COM METACARACTERES

Vamos a uma exemplo em que queremos buascar todas as ocorrências de digitos numéricos:
(BuscaDigitosNumericos.java)

Principais metacaracteres descritos na API de java.util.regex.Pattern:

\d -> encontra um digito(0-9)
\D -> encontra não dígitos, qualquer coisa menos 0-9
\s -> em espaço em branco (espaço, \t, \n, \f, \r)
\S -> encontra tudo que não seja um espaço em branco
\w -> encontra uma letra (a-z e A-Z, dígitos e underline)
\W -> encontra tudo que não seja letras
\b -> encontra tudo entre uma sequencia de caratectres \w *
\B -> encontra o contrário de \b *

* nestes casos, regex está à procura de uma relação específica entre dois personagens adjacentes.
Quando encontra uma correspondência, ele retorna a posição do segundo personagem. Além disso, observe
que as extremidades das Strings são considerados "não-letra" caracteres. Veja o exemplo:
(BuscaBoundary.java)

Veja um exemplo usando todas as regex acima:
(Busca.java)

BUSCA USANDO INTERVALOS

Você também pode especificar um grupo de caracteres para ser encontrado usando colchetes e intervalos de caracteres para buscar usando colchetes e um traço:
- [abc] Busca apenas por a, b ou c
- [a-f] Busca por a, b, c, d, e ou f

Além disso, você pode buscar por muitos intervalos de uma só vez veja:
- [a-fA-F] busca pelo primeiros 6 caractes do alfabeto tanto maiusculo, quanto minusculo.
(BuscaRange.java)

BUSCA USANDO QUANTIFICADORES

Para mostrar isso vamos dizer que você esteja procurando números hexadecimais, a regex abaixo resolveria o problema:

- 0[xX]([0-9a-fA-F])+

Essa expressão busca um grupo de caracteres em que '0' éo primeiro caractere, o segundo é um 'x' ou 'X' e o terceiro é uma digito de '0' a '9', uma letra de 'a' a 'f' ou de 'A' a 'F'. O '+' indica que o que está entre parenteses pode ser repetido.

Veja abaixo:
(BuscaComQuantificadores.java)
